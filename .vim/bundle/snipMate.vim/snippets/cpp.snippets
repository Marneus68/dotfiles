# Read File Into Vector
snippet readfile
	std::vector<char> v;
	if (FILE *${2:fp} = fopen(${1:"filename"}, "r")) {
		char buf[1024];
		while (size_t len = fread(buf, 1, sizeof(buf), $2))
			v.insert(v.end(), buf, buf + len);
		fclose($2);
	}${3}
# std::map
snippet map
	std::map<${1:key}, ${2:value}> map${3};
# std::vector
snippet vector
	std::vector<${1:char}> v${2};
# Namespace
snippet ns
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* $1 */
# Class
snippet cl
	class ${1:`Filename('$1_t', 'name')`} {
		private:
			${3:/* data */}
	
		public:
			$1 (${2:arguments});
			$1 (const $1&);
			virtual ~$1 ();

			$1 &operator=(const $1&);
	};
# Singleton Class Definition
snippet hscl
	class ${1:`Filename('$1_t', 'name')`} {
		private:
			/* private construtor */
			$1 (${2:arguments});
			/* private destructor */
			virtual ~$1 ();
			
			static $1 *_singleton;
			${3:/* data */}
		public:
			static $1 *Initialize($2);
			static void kill(void);
	};
# Singleton Class Implementation
snippet iscl
	/* methods for singleton class ${1:`Filename('$1_t', 'name')`} */
	
	/* singleton initialisation */
	$1 *$1::_singleton = NULL;

	/* constructor */
	$1::$1(${2:arguments}) {
		$3
	}

	/* destructor */
	$1::~$1(void) {
	
	}

	/* method to initialize the singleton class */
	$1* $1::Initialize(void) {
	    if (_singleton == NULL) {
	        _singleton =  new $1();
	    }
	    return _singleton;
	}
	
	/* kill the singleton */
	void $1::kill(void) {
	    if (_singleton != NULL) {
	        delete _singleton;
	        _singleton = NULL;
	    }
	}
