!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BaseClass	include/BaseClass.h	/^            BaseClass ();$/;"	p	class:ter::BaseClass	access:public	signature:()
BaseClass	include/BaseClass.h	/^    class BaseClass {$/;"	c	namespace:ter
CC	Makefile	/^CC      := g++$/;"	m
CFLAGS	Makefile	/^CFLAGS	:= -I $(INCDIR)$/;"	m
CPP_SRCS	Makefile	/^CPP_SRCS    = $(wildcard src\/*.cpp)$/;"	m
INCDIR	Makefile	/^INCDIR	:= include$/;"	m
Initialize	include/World.h	/^            static World *Initialize(int e_size);$/;"	p	class:ter::World	access:public	signature:(int e_size)
Initialize	src/World.cpp	/^    World* World::Initialize(int e_size) {$/;"	f	class:ter::World	signature:(int e_size)
LDFLAGS	Makefile	/^LDFLAGS := -lsfml-graphics -lsfml-window -lsfml-system$/;"	m
LDLIBS	Makefile	/^LDLIBS 	:= $/;"	m
OBJDIR	Makefile	/^OBJDIR	:= obj$/;"	m
OBJ_FILES	Makefile	/^OBJ_FILES   = $(patsubst $(SRCDIR)\/%.cpp,$(OBJDIR)\/%.o,$(CPP_SRCS))$/;"	m
OFLAGS	Makefile	/^OFLAGS  := -std=gnu++11$/;"	m
SRCDIR	Makefile	/^SRCDIR	:= src$/;"	m
TARGET	Makefile	/^TARGET  := $(shell basename $$PWD | tr '[:upper:]' '[:lower:]')$/;"	m
VPATH	Makefile	/^VPATH	:= $(INCDIR) $(SRCDIR) $(OBJDIR)$/;"	m
WARN	Makefile	/^WARN    :=$/;"	m
World	include/World.h	/^            World (int e_size);$/;"	p	class:ter::World	access:private	signature:(int e_size)
World	include/World.h	/^    class World {$/;"	c	namespace:ter
World	src/World.cpp	/^    World::World(int e_size) :$/;"	f	class:ter::World	signature:(int e_size)
__BASECLASS_H__	include/BaseClass.h	2;"	d
__WORLD_H__	include/World.h	2;"	d
_singleton	include/World.h	/^            static World *_singleton;$/;"	m	class:ter::World	access:private
_singleton	src/World.cpp	/^    World *World::_singleton = NULL;$/;"	m	class:ter::World	file:
generate	include/World.h	/^            void generate(void);$/;"	p	class:ter::World	access:public	signature:(void)
generate	src/World.cpp	/^    void World::generate(void) {$/;"	f	class:ter::World	signature:(void)
getValueAt	include/World.h	/^            int getValueAt(int e_x, int e_y);$/;"	p	class:ter::World	access:public	signature:(int e_x, int e_y)
getValueAt	src/World.cpp	/^    int World::getValueAt(int e_x, int e_y) {$/;"	f	class:ter::World	signature:(int e_x, int e_y)
kill	include/World.h	/^            static void kill(void);$/;"	p	class:ter::World	access:public	signature:(void)
kill	src/World.cpp	/^    void World::kill(void) {$/;"	f	class:ter::World	signature:(void)
m_size	include/World.h	/^            int m_size;$/;"	m	class:ter::World	access:private
m_table	include/World.h	/^            int * m_table;$/;"	m	class:ter::World	access:private
main	src/main.cpp	/^int main(int argc, const char *argv[])$/;"	f	signature:(int argc, const char *argv[])
randRange	include/World.h	/^            static int randRange(int from, int to);$/;"	p	class:ter::World	access:public	signature:(int from, int to)
randRange	src/World.cpp	/^    int World::randRange(int from, int to) {$/;"	f	class:ter::World	signature:(int from, int to)
ter	include/BaseClass.h	/^namespace ter {$/;"	n
ter	include/World.h	/^namespace ter {$/;"	n
ter	src/World.cpp	/^namespace ter {$/;"	n	file:
ter::BaseClass	include/BaseClass.h	/^    class BaseClass {$/;"	c	namespace:ter
ter::BaseClass::BaseClass	include/BaseClass.h	/^            BaseClass ();$/;"	p	class:ter::BaseClass	access:public	signature:()
ter::BaseClass::userData	include/BaseClass.h	/^            void * userData;$/;"	m	class:ter::BaseClass	access:public
ter::BaseClass::~BaseClass	include/BaseClass.h	/^            virtual ~BaseClass ();$/;"	p	class:ter::BaseClass	access:public	signature:()
ter::World	include/World.h	/^    class World {$/;"	c	namespace:ter
ter::World::Initialize	include/World.h	/^            static World *Initialize(int e_size);$/;"	p	class:ter::World	access:public	signature:(int e_size)
ter::World::Initialize	src/World.cpp	/^    World* World::Initialize(int e_size) {$/;"	f	class:ter::World	signature:(int e_size)
ter::World::World	include/World.h	/^            World (int e_size);$/;"	p	class:ter::World	access:private	signature:(int e_size)
ter::World::World	src/World.cpp	/^    World::World(int e_size) :$/;"	f	class:ter::World	signature:(int e_size)
ter::World::_singleton	include/World.h	/^            static World *_singleton;$/;"	m	class:ter::World	access:private
ter::World::_singleton	src/World.cpp	/^    World *World::_singleton = NULL;$/;"	m	class:ter::World	file:
ter::World::generate	include/World.h	/^            void generate(void);$/;"	p	class:ter::World	access:public	signature:(void)
ter::World::generate	src/World.cpp	/^    void World::generate(void) {$/;"	f	class:ter::World	signature:(void)
ter::World::getValueAt	include/World.h	/^            int getValueAt(int e_x, int e_y);$/;"	p	class:ter::World	access:public	signature:(int e_x, int e_y)
ter::World::getValueAt	src/World.cpp	/^    int World::getValueAt(int e_x, int e_y) {$/;"	f	class:ter::World	signature:(int e_x, int e_y)
ter::World::kill	include/World.h	/^            static void kill(void);$/;"	p	class:ter::World	access:public	signature:(void)
ter::World::kill	src/World.cpp	/^    void World::kill(void) {$/;"	f	class:ter::World	signature:(void)
ter::World::m_size	include/World.h	/^            int m_size;$/;"	m	class:ter::World	access:private
ter::World::m_table	include/World.h	/^            int * m_table;$/;"	m	class:ter::World	access:private
ter::World::randRange	include/World.h	/^            static int randRange(int from, int to);$/;"	p	class:ter::World	access:public	signature:(int from, int to)
ter::World::randRange	src/World.cpp	/^    int World::randRange(int from, int to) {$/;"	f	class:ter::World	signature:(int from, int to)
ter::World::~World	include/World.h	/^            virtual ~World ();$/;"	p	class:ter::World	access:private	signature:()
ter::World::~World	src/World.cpp	/^    World::~World(void) {$/;"	f	class:ter::World	signature:(void)
userData	include/BaseClass.h	/^            void * userData;$/;"	m	class:ter::BaseClass	access:public
~BaseClass	include/BaseClass.h	/^            virtual ~BaseClass ();$/;"	p	class:ter::BaseClass	access:public	signature:()
~World	include/World.h	/^            virtual ~World ();$/;"	p	class:ter::World	access:private	signature:()
~World	src/World.cpp	/^    World::~World(void) {$/;"	f	class:ter::World	signature:(void)
